@import '../../styles/common';
$control-size: rem(16px);

.Checkbox {
  position: relative;
  margin: var(--p-choice-margin, 0);
}

.Input {
  @include visually-hidden;

  &:not(.globalTheming) {
    &:focus,
    &:active,
    &:checked,
    &.Input-indeterminate {
      // stylelint-disable-next-line selector-max-class, selector-max-specificity
      + .Backdrop {
        background: color('indigo');
        // stylelint-disable-next-line selector-max-class, selector-max-specificity, max-nesting-depth
        &::after {
          background: color('white');
        }
      }
    }

    &:checked,
    &.Input-indeterminate {
      // stylelint-disable-next-line selector-max-class, selector-max-specificity
      ~ .Icon {
        transform: translate(-50%, -50%) scale(1);
      }
    }

    &:focus,
    &:active {
      // stylelint-disable-next-line selector-max-specificity
      + .Backdrop {
        @include control-backdrop(focused);
      }
    }

    &:disabled {
      // stylelint-disable-next-line selector-max-specificity
      + .Backdrop {
        @include control-backdrop(disabled);
      }
      // stylelint-disable-next-line selector-max-class, selector-max-specificity
      ~ .Icon {
        @include recolor-icon(color('ink', 'lightest'));
      }
    }
  }

  &.globalTheming {
    &:focus {
      // stylelint-disable-next-line selector-max-specificity
      + .Backdrop {
        @include focus-ring-animated($show: 1);
      }
    }
    // stylelint-disable-next-line selector-max-specificity
    &:active:not(:disabled),
    &:checked,
    &.Input-indeterminate {
      // stylelint-disable-next-line selector-max-specificity
      + .Backdrop {
        @include control-backdrop-dl(active);
      }
      // stylelint-disable-next-line selector-max-specificity, selector-max-class
      ~ .Icon {
        transform: translate(-50%, -50%) scale(1);
      }
    }

    &:disabled {
      // stylelint-disable-next-line selector-max-specificity
      + .Backdrop {
        @include control-backdrop-dl(disabled);
      }
    }
    // stylelint-disable-next-line selector-max-specificity
    &:disabled:checked {
      // stylelint-disable-next-line selector-max-specificity,
      + .Backdrop {
        background: var(--p-neutral-border-disabled);
        // stylelint-disable-next-line selector-max-specificity, selector-max-class, max-nesting-depth, selector-max-combinators
        &::before {
          background: var(--p-neutral-border-disabled);
        }
      }
    }
  }
}

.Backdrop {
  &:not(.globalTheming) {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    pointer-events: none;
    @include control-backdrop;
  }

  &.globalTheming {
    @include control-backdrop-dl;
    position: relative;
    display: block;
    width: 100%;
    height: 100%;
    @include focus-ring-animated;
  }
}

.Icon {
  @include recolor-icon(var(--p-icon-on-interactive, color('indigo')));
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) scale(0);
  transform-origin: 50% 50%;
  transition: control-icon-transition();
  pointer-events: none;

  @media (-ms-high-contrast: active) {
    fill: ms-high-contrast-color('text');
  }
}

.error {
  &:not(.globalTheming) {
    // The basic checked styles have more specificity than this, so need to
    // basically duplicate that selector here, too.
    // stylelint-disable-next-line selector-max-specificity, selector-max-combinators
    .Input:checked + .Backdrop,
    .Input.Input-indeterminate + .Backdrop,
    .Backdrop {
      @include control-backdrop(error);
    }

    // We need to know if the input is focusing to change the border color.
    // stylelint-disable-next-line selector-max-specificity, selector-max-combinators
    .Input:focus + .Backdrop,
    .Input:active + .Backdrop {
      @include control-backdrop(focused-error);
    }
  }

  &.globalTheming {
    .Backdrop {
      @include control-backdrop-dl(error);
    }
    // stylelint-disable-next-line selector-max-specificity
    .Input:checked,
    .Input:active,
    .Input.Input-indeterminate {
      // stylelint-disable-next-line selector-max-specificity, selector-max-combinators, selector-max-class
      + .Backdrop,
      + .Backdrop::before {
        background-color: var(--p-critical-border);
      }
    }
  }

  .Icon {
    @include recolor-icon(var(--p-icon-on-critical), color('red', 'dark'));
  }
}
